package sl

// DO NOT EDIT. THIS FILE WAS AUTOMATICALLY GENERATED

import (
	slapi "go-softlayer/slapi"
)

// SoftLayer_User_Customer_External_Binding_Verisign - The
// SoftLayer_User_Customer_External_Binding_Verisign data type contains information about a single
// VeriSign external binding. The external binding information is used when a SoftLayer customer logs
// into the SoftLayer customer portal to authenticate them against a 3rd party, in this case VeriSign.
// The information provided by the VeriSign external binding data type includes: * The type of
// credential * The current state of the credential ** Enabled ** Disabled ** Locked * The credential's
// expiration date * The last time the credential was updated SoftLayer users with an active external
// binding will be prohibited from using the API for security reasons.
type SoftLayer_User_Customer_External_Binding_Verisign struct {

	// CredentialExpirationDate - no documentation
	CredentialExpirationDate string `json:"credentialExpirationDate"`

	// CredentialLastUpdateDate - no documentation
	CredentialLastUpdateDate string `json:"credentialLastUpdateDate"`

	// CredentialState - The current state of a VeriSign credential. This can be 'Enabled', 'Disabled', or
	// 'Locked'.
	CredentialState string `json:"credentialState"`

	// CredentialType - The type of VeriSign credential. This can be either 'Hardware' or 'Software'.
	CredentialType string `json:"credentialType"`
}

// DeleteObject - Delete a VeriSign external binding. The only VeriSign external binding that can be
// deleted through this method is the free VeriSign external binding for the master user of a SoftLayer
// account. All other external bindings must be canceled using the SoftLayer service cancellation form.
// When a VeriSign external binding is deleted the credential is deactivated in VeriSign's system for
// use on the SoftLayer site and the $0 billing item associated with the free VeriSign external binding
// is cancelled.
func (softlayer_user_customer_external_binding_verisign *SoftLayer_User_Customer_External_Binding_Verisign) DeleteObject(ctx *slapi.RequestContext) (bool, error) {
	var returnValue bool
	return returnValue, nil
}

// Disable - Disabling an external binding will allow you to keep the external binding on your
// SoftLayer account, but will not require you to authentication with our trusted 2 form factor vendor
// when logging into the SoftLayer customer portal. You may supply one of the following reason when you
// disable an external binding: *Unspecified *TemporarilyUnavailable *Lost *Stolen
func (softlayer_user_customer_external_binding_verisign *SoftLayer_User_Customer_External_Binding_Verisign) Disable(ctx *slapi.RequestContext, reason string) (bool, error) {
	var returnValue bool
	return returnValue, nil
}

// Enable - Enabling an external binding will activate the binding on your account and require you to
// authenticate with our trusted 3rd party 2 form factor vendor when logging into the SoftLayer
// customer portal. Please note that API access will be disabled for users that have an active external
// binding.
func (softlayer_user_customer_external_binding_verisign *SoftLayer_User_Customer_External_Binding_Verisign) Enable(ctx *slapi.RequestContext) (bool, error) {
	var returnValue bool
	return returnValue, nil
}

// GetActivationCodeForMobileClient - An activation code is required when provisioning a new mobile
// credential from Verisign. This method will return the required activation code.
func (softlayer_user_customer_external_binding_verisign *SoftLayer_User_Customer_External_Binding_Verisign) GetActivationCodeForMobileClient(ctx *slapi.RequestContext) (string, error) {
	var returnValue string
	return returnValue, nil
}

// GetObject - <nil>
func (softlayer_user_customer_external_binding_verisign *SoftLayer_User_Customer_External_Binding_Verisign) GetObject(ctx *slapi.RequestContext) (*SoftLayer_User_Customer_External_Binding_Verisign, error) {
	var returnValue *SoftLayer_User_Customer_External_Binding_Verisign
	return returnValue, nil
}

// Unlock - If a VeriSign credential becomes locked because of too many failed login attempts the
// unlock method can be used to unlock a VeriSign credential. As a security precaution a valid security
// code generated by the credential will be required before the credential is unlocked.
func (softlayer_user_customer_external_binding_verisign *SoftLayer_User_Customer_External_Binding_Verisign) Unlock(ctx *slapi.RequestContext, securityCode string) (bool, error) {
	var returnValue bool
	return returnValue, nil
}

// ValidateCredentialId - Validate the user id and VeriSign credential id used to create an external
// authentication binding.
func (softlayer_user_customer_external_binding_verisign *SoftLayer_User_Customer_External_Binding_Verisign) ValidateCredentialId(ctx *slapi.RequestContext, userId int, externalId string) (bool, error) {
	var returnValue bool
	return returnValue, nil
}
